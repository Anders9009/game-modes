/**
 * Rules for the Heroes mode
 */

#Extends "Modes/ShootMania/ModeSport.Script.txt"

#Const Version		"2013-05-14"
#Const ScriptName	"Heroes.Script.txt"

#Setting S_TurnWin				10	as _("Number of points to win a map")				///< Score to reach to win a map
#Setting S_TimePoleElimination	10.	as _("Capture time limit after defense elimination")///< Countdown to capture after defense elimination

#Const C_AtkRocketAmmoMax	4	///< Atk Rocket ammo max
#Const C_AtkRocketAmmoGain	1.	///< Atk Rocket ammo gain
#Const C_AtkLaserAmmoMax	1	///< Atk Laser ammo max
#Const C_AtkLaserAmmoGain	0.8	///< Atk Laser ammo gain
#Const C_AtkNucleusAmmoMax	1	///< Atk Nucleus ammo max
#Const C_AtkNucleusAmmoGain	1.	///< Atk Nucleus ammo gain

#Const C_DefRocketAmmoMax	4	///< Def Rocket ammo max
#Const C_DefRocketAmmoGain	1.	///< Def Rocket ammo gain
#Const C_DefLaserAmmoMax	1	///< Def Laser ammo max
#Const C_DefLaserAmmoGain	1.	///< Def Laser ammo gain
#Const C_DefNucleusAmmoMax	1	///< Def Nucleus ammo max
#Const C_DefNucleusAmmoGain	1.	///< Def Nucleus ammo gain

#Const C_AtkEliminationPoints	1	///< Points for eliminating the attacker

#Const C_RequiredPlayersNb		5	///< Required number of players in each team

#Const Description _("TYPE: Team versus Team (5 vs 5)\nOBJECTIVE:\nOne team is in attack with four players with the Laser and one player with the Nucleus. The other team is in defense with five players with the Rocket.\nThe attackers must capture the pole but only the Nucleus can do it. The defenders must eliminate the Nucleus or prevent the capture.\nThe first team to reach the points limit wins the map.")

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***Rules***
***
/* -------------------------------------- */
// Create rules
declare ModeName = "Heroes";
declare ModeRules = TextLib::Compose(
	_("Two teams - 5 vs 5\n\n- The attacker must capture a pole after %1 seconds and before %2 seconds.\n- The defenders must prevent the attacker from capturing a pole.\n- The team in defense play with Rockets.\n- The team in attack play with 4 Lasers and 1 Nucleus.\n- The player with the Nucleus is the attacker and is the only one who can capture a pole.\n- If the attacker is eliminated, his team loose the turn.\n- The game is divided in rounds of two turns each.\n- During a round each team play one turn in attack and one turn in defense.\n- The team who wins the turn scores 1 point.\n- The first team to score at least %3 points with %4 ahead of his opponent wins the map."),
	TextLib::ToText(S_TimeLimit - S_TimePole),
	TextLib::ToText(S_TimeLimit),
	TextLib::ToText(S_TurnWin),
	TextLib::ToText(S_TurnGap)
);
SpawnScreen::CreateRules(ModeName, ModeRules);
ModeStatusMessage = _("TYPE: Team versus Team (5 vs 5)\nOBJECTIVE: Capture the pole when you're the attacker. Defend the pole when you're a defender.");
***

***InitTurn***
***
declare ElimationCountdown = False;	///< Switch the elimination countdown for capture on or off
declare LastDefSelfElim = False;	///< True if the last defenders respawned/fell in an offzone
***

***SpawnDef***
***
if (DefSpawned >= MaxDef) break;
if (!Players.existskey(PlayerId)) continue;

declare Player <=> Players[PlayerId];
declare CurrentWeapon for Player = 1;
CurrentWeapon = 1;
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_DefRocketAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, C_DefLaserAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, C_DefNucleusAmmoMax);

Player.AmmoGain		= 1. * C_DefRocketAmmoGain;
Player.StaminaMax	= 1. * C_DefStaminaMaxMultiplier;
Player.StaminaGain	= 1. * C_DefStaminaMaxMultiplier;
Player.ArmorMax		= C_DefArmorMax;
SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, True); 
SM::SpawnPlayer(Player, G_DefClan, DefBlockSpawn, Now);
Player.IsHighlighted = True;
DefSpawned += 1;
***

***SpawnAtk***
***
if (AtkSpawned >= C_RequiredPlayersNb) break;
if (!Players.existskey(PlayerId)) continue;
			
declare Player <=> Players[PlayerId];
declare CurrentWeapon for Player = 1;
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_AtkRocketAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, C_AtkLaserAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, C_AtkNucleusAmmoMax);

Player.StaminaMax	= 1.;
Player.StaminaGain	= 1.;
Player.ArmorMax		= C_DefArmorMax;
if (AtkSpawned <= 0) {
	CurrentWeapon = 3;
	Player.AmmoGain		= 1. * C_AtkNucleusAmmoGain;
	SetPlayerWeapon(Player, CSmMode::EWeapon::Nucleus, False);
	G_AtkPlayerId = PlayerId;
} else {
	CurrentWeapon = 2;
	Player.AmmoGain		= 1. * C_AtkLaserAmmoGain;
	SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
}
SM::SpawnPlayer(Player, G_AtkClan, AtkBlockSpawn, Now);
Player.IsHighlighted = True;
AtkSpawned += 1;
***

***PoleManagement***
***
/* -------------------------------------- */
// All defenders eliminated, start the capture countdown
if (ClansNbPlayersAlive[G_DefClan] <= 0 && S_TimePoleElimination >= 0) {
	if (!ElimationCountdown) {
		ElimationCountdown = True;
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = _("All defenders eliminated, capture the goal!");
		UIManager.UIAll.CountdownEndTime = -1;
		EndTime = Now + MathLib::NearestInteger(S_TimePoleElimination * 1000);
	}
	foreach (Goal in BlockPoles) {
		if (Goal.Gauge.Clan == G_DefClan) {
			Goal.Gauge.Clan = G_AtkClan;
			Goal.Gauge.Value = 0;
			Goal.Gauge.Max = MathLib::NearestInteger(S_TimeCapture * 1000) * BlockPoles.count;
		}
		
		if (Goal.Sector.PlayersIds.exists(G_AtkPlayerId)) {
			Goal.Gauge.Speed = 1;
		} else {
			Goal.Gauge.Speed = 0;
		}
	}
} else if (Now >= PoleTime) {
	if (!GoalCanBeCaptured) {
		GoalCanBeCaptured = True;
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = _("The goal can now be captured.");
		UIManager.UIAll.CountdownEndTime = -1;
	}
	
	/* -------------------------------------- */
	// Check if the attacker is capturing the pole
	foreach (Goal in BlockPoles) {
		if (Goal.Gauge.Value == 0 && Goal.Gauge.Clan == G_DefClan) {
			Goal.Gauge.Clan = G_AtkClan;
			Goal.Gauge.Max = MathLib::NearestInteger(S_TimeCapture * 1000) * BlockPoles.count;
		}
		
		if (Goal.Sector.PlayersIds.exists(G_AtkPlayerId)) {
			if(Goal.Gauge.Clan == G_DefClan) {
				Goal.Gauge.Speed = -1;
			} else {
				Goal.Gauge.Speed = 1;
			}
		} else {
			Goal.Gauge.Speed = 0;
		}
	}
}
***

***EventOnHit***
***
/* -------------------------------------- */
// Friendly fire off
if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) {
	Discard(Event);
} else {
	Event.Damage = 100;
	/* -------------------------------------- */
	// Shooter is in atk clan, victim in def clan
	if (Players.existskey(G_AtkPlayerId)) {
		if (Event.Shooter.CurrentClan == G_AtkClan) {
			if (LastActionClanNb != G_AtkClan) SoundVariant += 1;
			LastActionClanNb = G_AtkClan;
			
			// Elim last defender
			if (ClansNbPlayersAlive[G_DefClan] <= 1) {
				PlaySound(CUIConfig::EUISound::VictoryPoint, 0);
			} 
			// Elim standard defender
			else {
				PlaySound(CUIConfig::EUISound::TieBreakPoint, 4);
			}
			
			if (ClansNbPlayersAlive[G_DefClan] > 1) {
				declare DefLeft = ClansNbPlayersAlive[G_DefClan] - 1;
				if (DefLeft <= 1) {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 1 defender left."), 
						Teams[G_DefClan - 1].ColorText
					);
				} else {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 %2 defenders left."), 
						Teams[G_DefClan - 1].ColorText, 
						TextLib::ToText(DefLeft)
					);
				}								
				LastStatusTime = Now;
			}
			
			if (Event.Shooter.Score != Null) {
				declare NbHit for Event.Shooter.Score = 0;
				NbHit += 1;
				declare netwrite Net_LayerST_DefPoints for Event.Shooter = 0;
				Net_LayerST_DefPoints += 1;
			}
			
			if (Event.WeaponNum == GetWeaponNum(CSmMode::EWeapon::Laser)) DisplayHitDistance(Event.Shooter, Event.Victim, False);
		} 
		/* -------------------------------------- */
		// Shooter is in def clan, victim in atk clan
		else {
			if (LastActionClanNb != G_DefClan) SoundVariant += 1;
			LastActionClanNb = G_DefClan;
			
			// Elim nucleus attacker
			if (Event.Victim.Id == G_AtkPlayerId) {
				PlaySound(CUIConfig::EUISound::VictoryPoint, 0);
			} 
			// Elim standard attacker
			else {
				PlaySound(CUIConfig::EUISound::TieBreakPoint, 0);
			}
			
			declare NbLeft = 0;
			if (Event.Victim.Id == G_AtkPlayerId) {
				NbLeft = (Players[G_AtkPlayerId].Armor - 100) / 100;
				if (NbLeft <= 1) {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 1 armor left."), 
						Teams[G_AtkClan - 1].ColorText
					);
				} else {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 %2 armors left."), 
						Teams[G_AtkClan - 1].ColorText, 
						TextLib::ToText(NbLeft)
					);
				}
			} else {
				NbLeft = ClansNbPlayersAlive[G_AtkClan] - 1;
				if (NbLeft <= 1) {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 1 attacker left."), 
						Teams[G_AtkClan - 1].ColorText
					);
				} else {
					UIManager.UIAll.StatusMessage = TextLib::Compose(
						_("%1 %2 attackers left."), 
						Teams[G_AtkClan - 1].ColorText, TextLib::ToText(NbLeft)
					);
				}
			}
			LastStatusTime = Now;
			
			if (Event.Shooter.Score != Null) {
				declare NbHit for Event.Shooter.Score = 0;
				declare netwrite Net_LayerST_DefPoints for Event.Shooter = 0;
				if (Event.Victim.Id == G_AtkPlayerId) {
					NbHit += C_AtkEliminationPoints;
					Event.ShooterPoints = C_AtkEliminationPoints;
					Net_LayerST_DefPoints += C_AtkEliminationPoints;
				} else {
					NbHit += 1;
					Net_LayerST_DefPoints += 1;
				}
			}
		}
	}
	
	if (Event.WeaponNum == 1) {
		DisplayHitDistance(Event.Shooter, Event.Victim, True);
	}
	LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
	XmlRpc::OnHit(Event);
	PassOn(Event);
}
***

***EventOnArmorEmpty***
***
if (Event.Shooter != Null && Event.Shooter.CurrentClan == G_AtkClan) {
	G_MatchDefElim[Event.Shooter.CurrentClan] += 1;
	G_MapDefElim[Event.Shooter.CurrentClan] += 1;
}
// If the last defenders eliminate himself the attackers win
if (ClansNbPlayersAlive[G_DefClan] <= 1
	&& Event.Victim != Null 
	&& Event.Victim.CurrentClan == G_DefClan
	&& Event.Shooter == Null) 
{
	LastDefSelfElim = True;
}

if (Event.Victim.Id == G_AtkPlayerId && Event.Shooter != Null) G_AtkElimPlayerId = Event.Shooter.Id;
XmlRpc::OnArmorEmpty(Event);
PassOn(Event);
***

***EventOnPlayerRequestRespawn***
***
// If the last defenders request respawn the attackers win
if (ClansNbPlayersAlive[G_DefClan] <= 1
	&& Event.Player != Null
	&& Event.Player.CurrentClan == G_DefClan)
{
	LastDefSelfElim = True;
}
XmlRpc::OnPlayerRequestRespawn(Event);
PassOn(Event);
***

***EventOnCapture***
***
XmlRpc::OnCapture(Event);
PassOn(Event);
***

***EventOnShoot***
***
XmlRpc::OnShoot(Event);
PassOn(Event);
***

***EventOnNearMiss***
***
declare MaxMissDist = 0.5;
if (Event.Shooter != Null && Event.Victim != Null) {
	declare Distance = MathLib::Distance(Event.Shooter.Position, Event.Victim.Position);
	MaxMissDist = Distance * 2 / 100;
	if (MaxMissDist > 0.5) MaxMissDist = 0.5;
}

if (Event.Shooter != Null && Event.Shooter.CurrentClan == G_AtkClan && Event.MissDist <= MaxMissDist) {
	if (Event.MissDist < 0.01) {
		Message::SendStatusMessage(
			TextLib::Compose(
				_("%1$<%2$> misses by %3cm."), 
				Teams[G_AtkClan - 1].ColorText,
				Event.Shooter.Name, 
				TextLib::ToText(1)
			), 3000, 2
		);
	} else {
		Message::SendStatusMessage(
			TextLib::Compose(
				_("%1$<%2$> misses by %3cm."), 
				Teams[G_AtkClan - 1].ColorText,
				Event.Shooter.Name, 
				TextLib::ToText(MathLib::CeilingInteger(Event.MissDist*100))
			), 3000, 2
		);
	}
	XmlRpc::OnNearMiss(Event);
	PassOn(Event);
} else {
	Discard(Event);
}
***

***AllDefElim***
***
AllDefElim = ((ClansNbPlayersAlive[G_DefClan] <= 0 && S_TimePoleElimination <= 0) || LastDefSelfElim);
***

***CreateLayerScoresTable***
***
declare CW = 1.;
declare SW = 1.;

declare Team1Color = """{{{Teams[0].ColorPrimary.X}}} {{{Teams[0].ColorPrimary.Y}}} {{{Teams[0].ColorPrimary.Z}}}""";
declare Team2Color = """{{{Teams[1].ColorPrimary.X}}} {{{Teams[1].ColorPrimary.Y}}} {{{Teams[1].ColorPrimary.Z}}}""";

declare ImgPath = "file://Media/Manialinks/ShootMania/Common/";

// Scores table
return """	
<!-- **************** Scores table **************** -->
<frame posn="0 42" id ="Frame_ScoresTable">
	<format textemboss="1"/>
	<quad posn="0 38 -1" sizen="178 140" halign="center" image="{{{ImgPath}}}ScoresBg.dds" />
	<quad posn="-66.3 -1.5 6" sizen="40 36" halign="center" image="{{{ImgPath}}}ScoresBg_left.dds" colorize="{{{Team1Color}}}" />
	<quad posn=" 66.3 -1.5 6" sizen="40 36" halign="center" image="{{{ImgPath}}}ScoresBg_right.dds" colorize="{{{Team2Color}}}" />
	
	<!-- **************** Center panel **************** -->
	<frame posn="0 0">		
		<!-- **************** VS **************** -->
		<frame posn="0 -12" id="Frame_VS">
			<quad posn="-7 -2.5" sizen="15 15" halign="right" valign="bottom" style="Emblems" substyle="#1" />
			<quad posn="7 -2.5" sizen="15 15" valign="bottom" style="Emblems" substyle="#2" />
			<label posn="-46 1.5" sizen="46 5" textsize="4" halign="center" valign="bottom" scale="0.95" opacity="0.88" textemboss="1" id="Label_NameTeam1" />
			<label posn=" 46 1.5" sizen="46 5" textsize="4" halign="center" valign="bottom" scale="0.95" opacity="0.88" textemboss="1" id="Label_NameTeam2" />
		</frame>
		<!-- **************** Legends **************** -->
		<frame posn="0 -17.5">
			<label posn="-9 0" sizen="8 5" textsize="1" halign="right" valign="bottom" text="{{{_("|Substantive|Hit")}}}" />
			<label posn="-2 0" sizen="5 5" textsize="1" halign="right" valign="bottom" text="{{{_("|Attack,Substantive|Atk")}}}" />
			<label posn="2 0" sizen="5 5" textsize="1" valign="bottom" text="{{{_("|Attack,Substantive|Atk")}}}" />
			<label posn="9 0" sizen="8 5" textsize="1" valign="bottom" text="{{{_("|Substantive|Hit")}}}" />
		</frame>
		<!-- **************** Players Ranking **************** -->
		<frame posn="{{{-164*CW/2.}}} -17.7" id="Frame_Ranking">
			{{{CreatePlayersListBig(2, C_RequiredPlayersNb*2, CW)}}}
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL

declare CMlFrame Frame_Ranking;
declare CMlLabel Label_NameTeam1;
declare CMlLabel Label_NameTeam2;

Void UpdateReady(Integer _Slot, Boolean _Ready) {
	declare Frame_Player <=> (Frame_Ranking.GetFirstChild("Frame_Player_"^_Slot) as CMlFrame);
	if (Frame_Player == Null) return;
	declare Quad_NotReady <=> (Frame_Player.GetFirstChild("Quad_NotReady") as CMlQuad);
		
	if (_Ready) Quad_NotReady.ChangeImageUrl("file://Media/Manialinks/ShootMania/Elite/Ready.dds");
	else Quad_NotReady.ChangeImageUrl("file://Media/Manialinks/ShootMania/Elite/NotReady.dds");
}

Void UpdateScores(Integer _Slot, Integer _DefPoints, Integer _AtkPoints) {
	declare Frame_Player <=> (Frame_Ranking.GetFirstChild("Frame_Player_"^_Slot) as CMlFrame);
	if (Frame_Player == Null) return;
	declare Label_DefPoints	<=> (Frame_Player.GetFirstChild("Label_DefPoints") as CMlLabel);
	declare Label_AtkPoints	<=> (Frame_Player.GetFirstChild("Label_AtkPoints") as CMlLabel);
	
	Label_DefPoints.SetText(TL::ToText(_DefPoints));
	Label_AtkPoints.SetText(TL::ToText(_AtkPoints));
}

Void UpdatePlayerStatus(Integer _Slot, Ident _PlayerId) {
	if (!Players.existskey(_PlayerId)) return;
	declare Player <=> Players[_PlayerId];
	
	declare Frame_Player		<=> (Frame_Ranking.GetFirstChild("Frame_Player_"^_Slot)	as CMlFrame);
	if (Frame_Player == Null) return;
	declare Quad_Eliminated		<=> (Frame_Player.GetFirstChild("Quad_Eliminated")		as CMlQuad);
	declare Frame_LadderPoints	<=> (Frame_Player.GetFirstChild("Frame_LadderPoints")	as CMlFrame);
	declare Label_LadderPoints	<=> (Frame_Player.GetFirstChild("Label_LadderPoints")	as CMlLabel);
	declare Quad_Attacker		<=> (Frame_Player.GetFirstChild("Quad_Attacker")		as CMlQuad);
	declare Quad_NotReady		<=> (Frame_Player.GetFirstChild("Quad_NotReady")		as CMlQuad);
	
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned || UI.UISequence != CUIConfig::EUISequence::Playing) {
		Quad_Eliminated.Hide();
	} else {
		Quad_Eliminated.Show();
	}
	
	declare netread Integer Net_LayerST_Sequence for Teams[0];
	if (Net_LayerST_Sequence == {{{C_SequencePodium}}} && Player.Score != Null && Player.Score.LadderScore >= 0.) {
		declare LadderPointsExplode = TL::Split(".", TL::ToText(Player.Score.LadderScore));
		declare LadderPoints = "0.0";
		if (LadderPointsExplode.existskey(0)) LadderPoints = LadderPointsExplode[0];
		if (LadderPointsExplode.existskey(1)) LadderPoints ^= "."^TL::SubString(LadderPointsExplode[1], 0, 2);
		
		Frame_LadderPoints.Show();
		Label_LadderPoints.SetText(LadderPoints);
	} else {
		Frame_LadderPoints.Hide();
	}
	
	declare netread Text Net_LayerST_AttackerLogin for Teams[0];
	if (
		Player.Login == Net_LayerST_AttackerLogin 
		&& Net_LayerST_Sequence == {{{C_SequencePlaying}}} 
		&& UI.UISequence == CUIConfig::EUISequence::Playing
	) {
		Quad_Attacker.Show();
	} else {
		Quad_Attacker.Hide();
	}
	
	if (Net_LayerST_Sequence != {{{C_SequenceWarmUp}}}) {
		Quad_NotReady.Hide();
	} else {
		Quad_NotReady.Show();
	}
}

Void UpdatePlayer(Integer _Slot, Ident _PlayerId) {
	declare Frame_Player <=> (Frame_Ranking.GetFirstChild("Frame_Player_"^_Slot) as CMlFrame);
	if (Frame_Player == Null) return;
	
	declare Quad_Avatar 	<=> (Frame_Player.GetFirstChild("Quad_Avatar")		as CMlQuad);
	declare Label_Name		<=> (Frame_Player.GetFirstChild("Label_Name")		as CMlLabel);
	declare Label_Rank		<=> (Frame_Player.GetFirstChild("Label_Rank")		as CMlLabel);
	declare Frame_Stars		<=> (Frame_Player.GetFirstChild("Frame_Stars")		as CMlFrame);		
	
	if (Players.existskey(_PlayerId)) {
		declare Player <=> Players[_PlayerId];
		
		Frame_Player.Show();
		Quad_Avatar.ChangeImageUrl("file://Avatars/"^Player.Login^"/Default");
		Label_Name.SetText(Player.Name);
		
		declare ZonePath = _("Other");
		if (Player.User.ZonePath != "") {
			declare ExplodeZonePath = TL::Split("|", Player.User.ZonePath);
			if (ExplodeZonePath.existskey(1)) ZonePath = ExplodeZonePath[1];
		}
		declare ZoneRank = "-";
		if (Player.User.LadderRank > 0) ZoneRank = TL::ToText(Player.User.LadderRank);
		Label_Rank.SetText(TL::Compose("%1: %2", ZonePath, ZoneRank));
		
		if (Player.User.FameStars > 0 && Player.User.FameStars <= 5) {
			declare Quad_Star_1 <=> (Frame_Stars.GetFirstChild("Quad_Star_1") as CMlQuad);
			declare Quad_Star_2 <=> (Frame_Stars.GetFirstChild("Quad_Star_2") as CMlQuad);
			declare Quad_Star_3 <=> (Frame_Stars.GetFirstChild("Quad_Star_3") as CMlQuad);
			declare Quad_Star_4 <=> (Frame_Stars.GetFirstChild("Quad_Star_4") as CMlQuad);
			declare Quad_Star_5 <=> (Frame_Stars.GetFirstChild("Quad_Star_5") as CMlQuad);
			Frame_Stars.Show();
			Quad_Star_1.Hide();
			Quad_Star_2.Hide();
			Quad_Star_3.Hide();
			Quad_Star_4.Hide();
			Quad_Star_5.Hide();
			
			if (Player.User.FameStars >= 1) Quad_Star_1.Show();
			if (Player.User.FameStars >= 2) Quad_Star_2.Show();
			if (Player.User.FameStars >= 3) Quad_Star_3.Show();
			if (Player.User.FameStars >= 4) Quad_Star_4.Show();
			if (Player.User.FameStars >= 5) Quad_Star_5.Show();
		} else {
			Frame_Stars.Hide();
		}
		
		declare netread Boolean Net_LayerST_Ready for Player;
		UpdateReady(_Slot, Net_LayerST_Ready);
		
		declare netread Integer Net_LayerST_DefPoints for Player;
		declare netread Integer Net_LayerST_AtkPoints for Player;
		UpdateScores(_Slot, Net_LayerST_DefPoints, Net_LayerST_AtkPoints);
		
		UpdatePlayerStatus(_Slot, _PlayerId);
	} else {
		Frame_Player.Hide();
	}
}

main() {
	Frame_Ranking <=> (Page.GetFirstChild("Frame_Ranking") as CMlFrame);
	Label_NameTeam1 <=> (Page.GetFirstChild("Label_NameTeam1") as CMlLabel);
	Label_NameTeam2 <=> (Page.GetFirstChild("Label_NameTeam2") as CMlLabel);
	for (I, 1, {{{C_RequiredPlayersNb*2}}}) {
		UpdatePlayer(I, NullId);
	}
	
	declare netread Integer			Net_LayerST_Update		for Teams[0];
	declare netread Integer[Text]	Net_LayerST_Logins		for Teams[0];
	declare netread Integer 		Net_LayerST_Sequence	for Teams[0];
	
	declare Initialized = False;
	declare PlayersSlot = Ident[Integer];
	declare PrevUpdate = 0;
	declare PrevUISequence = CUIConfig::EUISequence::None;
	declare PrevSequence = -1;
	declare PrevTeam1Name = "";
	declare PrevTeam2Name = "";
	
	while (True) {
		sleep(100);
		
		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;
		
		if (!Initialized) {
			Initialized = True;
			foreach (Player in Players) {
				declare PrevDefPoints for Player = -1;
				declare PrevAtkPoints for Player = -1;
				PrevDefPoints = -1;
				PrevAtkPoints = -1;
			}
		}
		
		if (PrevUpdate != Net_LayerST_Update) {
			PrevUpdate = Net_LayerST_Update;
			
			declare NewPlayersSlot = Ident[Integer];
			foreach (Player in Players) {
				declare Slot for Player = 0;
				if (Net_LayerST_Logins.existskey(Player.Login)) {
					Slot = Net_LayerST_Logins[Player.Login];
					NewPlayersSlot[Slot] = Player.Id;
				} else {
					Slot = 0;
				}
			}
			
			for (I, 1, {{{C_RequiredPlayersNb*2}}}) {
				if (PlayersSlot.existskey(I) && NewPlayersSlot.existskey(I)) {
					if (PlayersSlot[I] != NewPlayersSlot[I]) {
						PlayersSlot[I] = NewPlayersSlot[I];
						UpdatePlayer(I, PlayersSlot[I]);
					}
				} else if (PlayersSlot.existskey(I)) {
					declare Removed = PlayersSlot.removekey(I);
					UpdatePlayer(I, NullId);
				} else if (NewPlayersSlot.existskey(I)) {
					PlayersSlot[I] = NewPlayersSlot[I];
					UpdatePlayer(I, PlayersSlot[I]);
				} 
			}
		}
		
		if (PrevTeam1Name != Teams[0].ColorizedName || PrevTeam2Name != Teams[1].ColorizedName) {
			PrevTeam1Name = Teams[0].ColorizedName;
			PrevTeam2Name = Teams[1].ColorizedName;
			
			if (Teams[0].ColorizedName == "$<$00fBlue$>") Label_NameTeam1.SetText("$<$fffBlue$>");
			else Label_NameTeam1.SetText(Teams[0].ColorizedName);
			if (Teams[1].ColorizedName == "$<$f00Red$>") Label_NameTeam2.SetText("$<$fffRed$>");
			else Label_NameTeam2.SetText(Teams[1].ColorizedName);
		}
		
		foreach (Player in Players) {
			declare Slot for Player = 0;
			if (Slot <= 0) continue;
			
			declare netread Boolean Net_LayerST_Ready for Player;
			declare PrevReady for Player = False;
			
			if (PrevReady != Net_LayerST_Ready) {
				PrevReady = Net_LayerST_Ready;
				UpdateReady(Slot, PrevReady);
			}
			
			declare netread Integer Net_LayerST_DefPoints for Player;
			declare netread Integer Net_LayerST_AtkPoints for Player;
			declare PrevDefPoints for Player = -1;
			declare PrevAtkPoints for Player = -1;
			if (PrevDefPoints != Net_LayerST_DefPoints || PrevAtkPoints != Net_LayerST_AtkPoints) {
				PrevDefPoints = Net_LayerST_DefPoints;
				PrevAtkPoints = Net_LayerST_AtkPoints;
				UpdateScores(Slot, PrevDefPoints, PrevAtkPoints);
			}
			
			declare PrevSpawnStatus for Player = CSmPlayer::ESpawnStatus::Spawned;
			if (PrevSpawnStatus != Player.SpawnStatus) {
				PrevSpawnStatus = Player.SpawnStatus;
				UpdatePlayerStatus(Slot, Player.Id);
			}
		}
		
		if (PrevUISequence != UI.UISequence || PrevSequence != Net_LayerST_Sequence) {
			PrevUISequence = UI.UISequence;
			PrevSequence = Net_LayerST_Sequence;
			
			for (I, 1, {{{C_RequiredPlayersNb*2}}}) {
				if (PlayersSlot.existskey(I)) UpdatePlayerStatus(I, PlayersSlot[I]);
			}
		}
		
	}
}
--></script>
""";
***


***UpdateLayerScoresTable***
***
declare Logins = Integer[Text];
declare AttackerLogin = "";
for (I, 1, 2) {
	G_MapOrder[I] = G_MapOrder[I].sort();
	foreach (Id => Order in G_MapOrder[I]) {
		if (Players.existskey(Id)) {
			declare Player <=> Players[Id];
			Logins[Player.Login] = Order + ((I-1) * C_RequiredPlayersNb);
			if (Player.Id == G_AtkPlayerId) AttackerLogin = Player.Login;
			
			declare netwrite Net_LayerST_Ready for Player = False;
			Net_LayerST_Ready = WarmUp::IsReady(Player);
		}
	}
}

declare netwrite Net_LayerST_Update			for Teams[0] = -1;
declare netwrite Net_LayerST_Logins			for Teams[0] = Integer[Text];
declare netwrite Net_LayerST_AttackerLogin	for Teams[0] = "";
declare netwrite Net_LayerST_Sequence		for Teams[0] = _Mode;
Net_LayerST_Update = Now;
Net_LayerST_Logins = Logins;
Net_LayerST_AttackerLogin = AttackerLogin;
Net_LayerST_Sequence = _Mode;
***

/* ------------------------------------- */
/// Update the Hud3dMarkers.
Void UpdateMarkers() {
	// Set the marker above the goal
	UIManager.UIAll.Hud3dMarkers = "";
	
	declare AtkPlayerLogin = "";
	if (Players.existskey(G_AtkPlayerId)) AtkPlayerLogin = Players[G_AtkPlayerId].Login;
	
	declare ColorPoles = Teams[G_DefClan - 1].ColorText;
	declare ColorNucleus = TextLib::SubString(Teams[G_AtkClan - 1].ColorText, 1, 3);
	
	declare NucleusMarker = "";
	if (AtkPlayerLogin != "") {
		NucleusMarker = """<marker icon="Player3" playerlogin="{{{AtkPlayerLogin}}}" box="0 2 0" />""";
	}
	
	declare PolesMarker = "";
	foreach (Goal in BlockPoles) {
		declare Icon = "PointA";
		declare Name = "$w$s$oA";
		if (Goal.Tag == "Goal B") { Icon = "PointB"; Name = "$w$s$oB"; }
		else if (Goal.Tag == "Goal C") { Icon = "PointC"; Name = "$w$s$oC"; }
		PolesMarker ^= """<marker icon="{{{Icon}}}" pos="{{{Goal.Position.X}}} {{{Goal.Position.Y + 25}}} {{{Goal.Position.Z}}}" />""";
	}
		
	foreach (Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		if (Player.CurrentClan == G_AtkClan && Player.Login != AtkPlayerLogin) {
			UI.Hud3dMarkers = NucleusMarker ^ PolesMarker;
		} else {
			UI.Hud3dMarkers = PolesMarker;
		}
	}
	foreach (Spectator in Spectators) {
		declare UI <=> UIManager.GetUI(Spectator);
		if (UI == Null) continue;
		UI.Hud3dMarkers = PolesMarker ^ NucleusMarker;
	}
}